name: CI/CD Pipeline

on:
  push:
  workflow_dispatch:
    inputs:
      updateImageTags:
        description: "If true, the Docker image tags for the webapp/service are updated to the latest versions from their main branch"
        required: false

env:
  TERRAFORM_VERSION: 1.0.0

jobs:
  terraform_lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Lint
        run: terraform fmt --recursive --check

  prettier_check:
    name: Prettier check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Prettier check
        run: |
          npm ci
          npm run format:check

  update_dev_docker_images:
    name: Updates dev Docker image tags to latest versions
    runs-on: ubuntu-latest
    outputs:
      webapp_commit_hash: ${{ steps.get_webapp_commit_hash.outputs.webapp_commit_hash }}
      service_commit_hash: ${{ steps.get_service_commit_hash.outputs.service_commit_hash }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "mcagov/beacons-webapp"
      - id: get_webapp_commit_hash
        name: Get commit hash from Webapp repo
        run: echo "::set-output name=webapp_commit_hash::$(git rev-parse HEAD)"
      - uses: actions/checkout@v2
        with:
          repository: "mcagov/beacons-service"
      - id: get_service_commit_hash
        name: Get commit hash from Service repo
        run: echo "::set-output name=service_commit_hash::$(git rev-parse HEAD)"
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.MCA_GITHUB_TOKEN }}
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Save image tags for dev environment
        if: github.event.inputs.updateImageTags == 'true'
        run: |
          cd terraform
          echo "webapp_image_tag = \"${{ steps.get_webapp_commit_hash.outputs.webapp_commit_hash }}\"" > dev.images.tfvars
          echo "service_image_tag = \"${{ steps.get_service_commit_hash.outputs.service_commit_hash }}\"" >> dev.images.tfvars
          terraform fmt
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update image tags used in dev environment [skip ci]" & git push

  terraform_deploy_dev:
    needs: [terraform_lint, update_dev_docker_images, prettier_check]
    if: github.ref == 'refs/heads/main'
    name: Terraform Deploy
    runs-on: ubuntu-latest
    environment: development
    defaults:
      run:
        working-directory: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_WORKSPACE: dev
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Deploy
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_gov_notify_api_key: ${{ secrets.GOV_NOTIFY_API_KEY }}
          TF_VAR_gov_notify_customer_email_template: ${{ secrets.GOV_NOTIFY_CUSTOMER_EMAIL_TEMPLATE }}
          TF_VAR_basic_auth: ${{ secrets.BASIC_AUTH_CREDENTIALS }}
          TF_VAR_webapp_azure_ad_client_secret: ${{ secrets.WEBAPP_CLIENT_SECRET }}
          TF_VAR_webapp_azure_b2c_client_secret: ${{ secrets.AZURE_B2C_CLIENT_SECRET }}
          TF_VAR_webapp_azure_b2c_next_auth_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_service_basic_auth_username: ${{ secrets.SERVICE_BASIC_AUTH_USERNAME }}
          TF_VAR_service_basic_auth_password: ${{ secrets.SERVICE_BASIC_AUTH_PASSWORD }}
          TF_VAR_alert_email_address: ${{ secrets.ALERT_EMAIL_ADDRESS }}
          TF_VAR_aws_account_number: ${{ secrets.AWS_ACCOUNT_NUMBER }}
        run: terraform apply -auto-approve -var-file=dev.tfvars -var-file=dev.images.tfvars
